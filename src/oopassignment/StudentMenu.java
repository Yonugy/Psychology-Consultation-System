/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package oopassignment;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author HP
 */
public class StudentMenu extends javax.swing.JFrame {
    public String stuID;
    public int choice;

    /**
     * Creates new form StudentMenu
     */
    public StudentMenu(String stuID) {
        initComponents();
        this.stuID=stuID;
        makeConsBtn.setEnabled(false);
        cancelBtn.setEnabled(false);
        rescheBtn.setEnabled(false);
        datePicker.setVisible(false);
        feedbackPan.setVisible(false);
        slotsTable.getColumnModel().getColumn(0).setWidth(0);
        slotsTable.getColumnModel().getColumn(0).setMinWidth(0);
        slotsTable.getColumnModel().getColumn(0).setMaxWidth(0); 
        slotsTable.getColumnModel().getColumn(5).setWidth(0);
        slotsTable.getColumnModel().getColumn(5).setMinWidth(0);
        slotsTable.getColumnModel().getColumn(5).setMaxWidth(0);
    }

    public String getStuID() {
        return stuID;
    }

    public int getChoice() {
        return choice;
    }

    public void setChoice(int choice) {
        this.choice = choice;
    }
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        slotsTable = new javax.swing.JTable();
        viewSlotBtn = new javax.swing.JButton();
        viewAppBtn = new javax.swing.JButton();
        makeConsBtn = new javax.swing.JButton();
        pastBox = new javax.swing.JCheckBox();
        futureBox = new javax.swing.JCheckBox();
        cancelBtn = new javax.swing.JButton();
        rescheBtn = new javax.swing.JButton();
        datePicker = new javax.swing.JPanel();
        monthBox = new javax.swing.JComboBox<>();
        yearBox = new javax.swing.JComboBox<>();
        hourBox = new javax.swing.JComboBox<>();
        minuteBox = new javax.swing.JComboBox<>();
        dateDoneBtn = new javax.swing.JButton();
        dayBox = new javax.swing.JComboBox<>();
        feedbackBtn = new javax.swing.JButton();
        feedbackPan = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        feedbackBox = new javax.swing.JTextArea();
        feedbackDoneBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(543, 363));

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        slotsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Consultation ID", "Lecturer", "Date", "Time", "Duration (min)", "Student Feedback", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        slotsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        slotsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                slotsTableMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(slotsTable);
        if (slotsTable.getColumnModel().getColumnCount() > 0) {
            slotsTable.getColumnModel().getColumn(0).setResizable(false);
            slotsTable.getColumnModel().getColumn(1).setResizable(false);
            slotsTable.getColumnModel().getColumn(2).setResizable(false);
            slotsTable.getColumnModel().getColumn(3).setResizable(false);
            slotsTable.getColumnModel().getColumn(4).setResizable(false);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                .addContainerGap())
        );

        viewSlotBtn.setText("View available slots");
        viewSlotBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewSlotBtnActionPerformed(evt);
            }
        });

        viewAppBtn.setText("View appointments");
        viewAppBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAppBtnActionPerformed(evt);
            }
        });

        makeConsBtn.setText("Make consultation");
        makeConsBtn.setEnabled(false);
        makeConsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeConsBtnActionPerformed(evt);
            }
        });

        pastBox.setSelected(true);
        pastBox.setText("Past");

        futureBox.setSelected(true);
        futureBox.setText("Future");

        cancelBtn.setText("Cancel");
        cancelBtn.setEnabled(false);
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        rescheBtn.setText("Reschedule");
        rescheBtn.setEnabled(false);
        rescheBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rescheBtnActionPerformed(evt);
            }
        });

        monthBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        monthBox.setMaximumSize(new java.awt.Dimension(100, 26));
        monthBox.setMinimumSize(new java.awt.Dimension(100, 26));
        monthBox.setPreferredSize(new java.awt.Dimension(100, 26));

        yearBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2024", "2025" }));
        yearBox.setMaximumSize(new java.awt.Dimension(100, 26));
        yearBox.setMinimumSize(new java.awt.Dimension(100, 26));
        yearBox.setPreferredSize(new java.awt.Dimension(100, 26));

        hourBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "08", "09", "10", "11", "12", "13", "14", "15", "16" }));

        minuteBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "00", "30" }));

        dateDoneBtn.setText("Done");
        dateDoneBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateDoneBtnActionPerformed(evt);
            }
        });

        dayBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        dayBox.setMaximumSize(new java.awt.Dimension(100, 26));
        dayBox.setMinimumSize(new java.awt.Dimension(100, 26));
        dayBox.setName(""); // NOI18N
        dayBox.setPreferredSize(new java.awt.Dimension(100, 26));

        javax.swing.GroupLayout datePickerLayout = new javax.swing.GroupLayout(datePicker);
        datePicker.setLayout(datePickerLayout);
        datePickerLayout.setHorizontalGroup(
            datePickerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datePickerLayout.createSequentialGroup()
                .addGroup(datePickerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(datePickerLayout.createSequentialGroup()
                        .addComponent(monthBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dayBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(yearBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hourBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(minuteBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(datePickerLayout.createSequentialGroup()
                        .addComponent(dateDoneBtn)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        datePickerLayout.setVerticalGroup(
            datePickerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datePickerLayout.createSequentialGroup()
                .addGroup(datePickerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(monthBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dayBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yearBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hourBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minuteBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dateDoneBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        feedbackBtn.setText("Feedback");
        feedbackBtn.setEnabled(false);
        feedbackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                feedbackBtnActionPerformed(evt);
            }
        });

        feedbackBox.setColumns(20);
        feedbackBox.setRows(5);
        jScrollPane1.setViewportView(feedbackBox);

        feedbackDoneBtn.setText("Done");
        feedbackDoneBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                feedbackDoneBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout feedbackPanLayout = new javax.swing.GroupLayout(feedbackPan);
        feedbackPan.setLayout(feedbackPanLayout);
        feedbackPanLayout.setHorizontalGroup(
            feedbackPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(feedbackPanLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(feedbackPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(feedbackPanLayout.createSequentialGroup()
                        .addComponent(feedbackDoneBtn)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        feedbackPanLayout.setVerticalGroup(
            feedbackPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(feedbackPanLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(feedbackDoneBtn)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(feedbackPan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(datePicker, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(viewAppBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(makeConsBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(viewSlotBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(pastBox, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(futureBox, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cancelBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(rescheBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(feedbackBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(viewSlotBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(makeConsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewAppBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pastBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(futureBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rescheBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(feedbackBtn))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(datePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(feedbackPan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void viewSlotBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewSlotBtnActionPerformed
        makeConsBtn.setEnabled(false);
        cancelBtn.setEnabled(false);
        rescheBtn.setEnabled(false);
        feedbackBtn.setEnabled(false);
        datePicker.setVisible(false);
        feedbackPan.setVisible(false);
        setChoice(1);
        loadFile("consultation");
    }//GEN-LAST:event_viewSlotBtnActionPerformed

    public void loadFile(String name){
        String path="";
        DefaultTableModel model = (DefaultTableModel) slotsTable.getModel();
        model.setRowCount(0);
        if (name.equals("consultation")){
            path = "consultation.txt";
        }else{
            return;
        }
        
        try (BufferedReader br = new BufferedReader(new FileReader(path))) {
            String line;
            String[] rowData;
            line = br.readLine();
            // Read file line by line
            while ((line = br.readLine()) != null) {
                // Split the line by commas (or any other delimiter)
                rowData = line.split(",");                
                if (rowData[8].trim().equals("Scheduled")){
                    String[] takeData = {rowData[0],rowData[1],rowData[3],rowData[4],rowData[5],rowData[7],rowData[8]};
                    model.addRow(takeData);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading file!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void createAppointment(String consID){
        String path = "consultation.txt";
        String stuID = getStuID();
        String newContent="Consultation Slot ID, Lecturer ID, Student ID, Date, Time, Duration (min), Lecturer Feedback, Student Feedback, Status\n";
        try (BufferedReader br = new BufferedReader(new FileReader(path))) {
            String line;
            String[] rowData;
            line = br.readLine();
            // Read file line by line
            while ((line = br.readLine()) != null) {
                rowData = line.split(",");
                if (rowData[0].equals(consID)){
                    line="";
                    String add="";
                    for (int i =0;i<rowData.length;i++){
                        if (i==2){
                            add=" "+stuID+",";
                        }else if (i==rowData.length-1){
                            add=" Booked";
                        }else{
                            add=rowData[i]+",";
                        }
                        line=line+add;
                    }
                }
                newContent = newContent + line + "\n";
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        try{
            FileWriter writer = new FileWriter(path, false);
        
            writer.write(newContent);
            
            writer.close();
        
        }catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    private void slotsTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_slotsTableMousePressed
        datePicker.setVisible(false);
        feedbackPan.setVisible(false);
        if (getChoice()==1){
            makeConsBtn.setEnabled(true);
        }else if (getChoice()==2){
            int row = slotsTable.getSelectedRow();
            String status = slotsTable.getModel().getValueAt(row, 6).toString().trim();
            String stuFeedback = slotsTable.getModel().getValueAt(row, 5).toString().trim();
            if (status.equals("Booked")){
                cancelBtn.setEnabled(true);
                rescheBtn.setEnabled(true);
                feedbackBtn.setEnabled(false);
            }else if (status.equals("Completed") && stuFeedback.equals("-")){
                cancelBtn.setEnabled(false);
                rescheBtn.setEnabled(false);
                feedbackBtn.setEnabled(true);
            }else{
                cancelBtn.setEnabled(false);
                rescheBtn.setEnabled(false);
                feedbackBtn.setEnabled(false);
            }
            
        }
        
    }//GEN-LAST:event_slotsTableMousePressed

    private void viewAppBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAppBtnActionPerformed
        refreshApp();
    }

    private void refreshApp(){
        setChoice(2);
        makeConsBtn.setEnabled(false);
        cancelBtn.setEnabled(false);
        rescheBtn.setEnabled(false);
        feedbackBtn.setEnabled(false);
        datePicker.setVisible(false);
        feedbackPan.setVisible(false);
        DefaultTableModel model = (DefaultTableModel) slotsTable.getModel();
        model.setRowCount(0);
        String path = "consultation.txt";
        String stuID = getStuID();
        String status;
        boolean past = pastBox.isSelected();
        boolean future = futureBox.isSelected();
        try (BufferedReader br = new BufferedReader(new FileReader(path))) {
            String line;
            String[] rowData;
            line = br.readLine();
            // Read file line by line
            while ((line = br.readLine()) != null) {
                rowData = line.split(",");
                status=rowData[8].trim();
                String[] takeData = {rowData[0],rowData[1],rowData[3],rowData[4],rowData[5],rowData[7],rowData[8]};
                if (rowData[2].trim().equals(stuID)){
                    if (status.equals("Booked") && future){
                        model.addRow(takeData);
                    }else if (status.equals("Completed") && past){
                        model.addRow(takeData);
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_viewAppBtnActionPerformed

    private void makeConsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeConsBtnActionPerformed
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog(null, "Would You Like to confirm the booking?","Confirmation",dialogButton);
        if (dialogResult==0){
            int row = slotsTable.getSelectedRow();
            String consID = slotsTable.getModel().getValueAt(row, 0).toString();
            createAppointment(consID);
        }
    }//GEN-LAST:event_makeConsBtnActionPerformed

    private void changeAppointment(String action, String consID, String dt, String fb){
        String path = "consultation.txt";
        String stuID = getStuID();
        String newContent="Consultation Slot ID, Lecturer ID, Student ID, Date, Time, Duration (min), Lecturer Feedback, Student Feedback, Status\n";
        try (BufferedReader br = new BufferedReader(new FileReader(path))) {
            String line;
            String[] rowData;
            line = br.readLine();
            // Read file line by line
            while ((line = br.readLine()) != null) {
                rowData = line.split(",");
                if (rowData[0].equals(consID)){
                    line="";
                    String add="";
                    for (int i =0;i<rowData.length;i++){
                        if (i==rowData.length-1){
                            add=" "+action;
                        }else if (i==3 && dt!=""){
                            add=" "+dt+",";
                            i++;
                        }else if (i==7 && fb!=""){
                            add=" "+fb+",";
                        }else{
                            add=rowData[i]+",";
                        }
                        line=line+add;
                    }
                }
                newContent = newContent + line + "\n";
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        try{
            FileWriter writer = new FileWriter(path, false);
        
            writer.write(newContent);
            
            writer.close();
        
        }catch (IOException e) {
            e.printStackTrace();
        }
        refreshApp();
    }
    
    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure you want to cancel the appointment?","Confirmation",dialogButton);
        if (dialogResult==0){
            int row = slotsTable.getSelectedRow();
            String consID = slotsTable.getModel().getValueAt(row, 0).toString();
            changeAppointment("Canceled",consID,"","");
        }
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void rescheBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rescheBtnActionPerformed
        datePicker.setVisible(true);
    }//GEN-LAST:event_rescheBtnActionPerformed

    private void dateDoneBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateDoneBtnActionPerformed
        int month = monthBox.getSelectedIndex()+1;
        String day = dayBox.getSelectedItem().toString();
        String year = yearBox.getSelectedItem().toString();
        String hour = hourBox.getSelectedItem().toString();
        String minute = minuteBox.getSelectedItem().toString();
        String date = year+"-"+month+"-"+day;
        String time = hour+":"+minute;
        String datetime = date+", "+time;
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure you want to propose this date and time for rescheldule?","Confirmation",dialogButton);
        if (dialogResult==0){
            int row = slotsTable.getSelectedRow();
            String consID = slotsTable.getModel().getValueAt(row, 0).toString();
            changeAppointment("Rescheduling",consID,datetime,"");
            datePicker.setVisible(false);
        }
    }//GEN-LAST:event_dateDoneBtnActionPerformed

    private void feedbackDoneBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_feedbackDoneBtnActionPerformed
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog(null, "Confirm feedback?","Confirmation",dialogButton);
        if (dialogResult==0){
            int row = slotsTable.getSelectedRow();
            String consID = slotsTable.getModel().getValueAt(row, 0).toString();
            String feedback = feedbackBox.getText();
            changeAppointment("Completed",consID,"",feedback);
        }
    }//GEN-LAST:event_feedbackDoneBtnActionPerformed

    private void feedbackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_feedbackBtnActionPerformed
        feedbackPan.setVisible(true);
    }//GEN-LAST:event_feedbackBtnActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentMenu("4").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelBtn;
    private javax.swing.JButton dateDoneBtn;
    private javax.swing.JPanel datePicker;
    private javax.swing.JComboBox<String> dayBox;
    private javax.swing.JTextArea feedbackBox;
    private javax.swing.JButton feedbackBtn;
    private javax.swing.JButton feedbackDoneBtn;
    private javax.swing.JPanel feedbackPan;
    private javax.swing.JCheckBox futureBox;
    private javax.swing.JComboBox<String> hourBox;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton makeConsBtn;
    private javax.swing.JComboBox<String> minuteBox;
    private javax.swing.JComboBox<String> monthBox;
    private javax.swing.JCheckBox pastBox;
    private javax.swing.JButton rescheBtn;
    private javax.swing.JTable slotsTable;
    private javax.swing.JButton viewAppBtn;
    private javax.swing.JButton viewSlotBtn;
    private javax.swing.JComboBox<String> yearBox;
    // End of variables declaration//GEN-END:variables
}
