/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package oopassignment;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author HP
 */
public class UpdatePage extends javax.swing.JFrame {
    
    private int UpdateStatus=0;

    /**
     * Creates new form UpdatePage
     */
    public UpdatePage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        UpdateType = new javax.swing.ButtonGroup();
        ReceiveRadio = new javax.swing.JRadioButton();
        DistributeRadio = new javax.swing.JRadioButton();
        UpdateTarget = new javax.swing.JComboBox<>();
        UpdateQuantity = new javax.swing.JSpinner();
        UpdatePPE = new javax.swing.JComboBox<>();
        UpdateBtn = new javax.swing.JButton();
        UpdateDate = new javax.swing.JSpinner();
        UpdateBtn1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Transaction Details");

        UpdateType.add(ReceiveRadio);
        ReceiveRadio.setText("Receive");
        ReceiveRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReceiveRadioActionPerformed(evt);
            }
        });

        UpdateType.add(DistributeRadio);
        DistributeRadio.setText("Distribute");
        DistributeRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DistributeRadioActionPerformed(evt);
            }
        });

        UpdateTarget.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        UpdateQuantity.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        UpdateQuantity.setMinimumSize(new java.awt.Dimension(100, 26));
        UpdateQuantity.setPreferredSize(new java.awt.Dimension(100, 26));

        UpdatePPE.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "HC", "FS", "MS", "GL", "GW", "SC" }));

        UpdateBtn.setText("Update");
        UpdateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateBtnActionPerformed(evt);
            }
        });

        UpdateDate.setModel(new javax.swing.SpinnerDateModel());
        UpdateDate.setMinimumSize(new java.awt.Dimension(100, 26));
        UpdateDate.setPreferredSize(new java.awt.Dimension(100, 26));

        UpdateBtn1.setText("Close");
        UpdateBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateBtn1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ReceiveRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(UpdateTarget, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(UpdatePPE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(DistributeRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(UpdateQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(UpdateBtn)
                        .addGap(46, 46, 46)
                        .addComponent(UpdateBtn1))
                    .addComponent(UpdateDate, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(136, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ReceiveRadio)
                    .addComponent(DistributeRadio))
                .addGap(18, 18, 18)
                .addComponent(UpdateTarget, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(UpdatePPE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(UpdateQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(UpdateDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UpdateBtn)
                    .addComponent(UpdateBtn1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DistributeRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DistributeRadioActionPerformed
        if (UpdateStatus==2){
            return;
        }
        String path = "C:\\Users\\HP\\OneDrive - Asia Pacific University\\Class materials\\Sem 4\\OOP\\OOPAssignment\\src\\oopassignment\\hospitals.txt";
        try (BufferedReader br = new BufferedReader(new FileReader(path))) {
            UpdateStatus=2;
            String line;
            UpdateTarget.removeAllItems();
            br.readLine();
            UpdateTarget.addItem("Select");
            // Read file line by line
            while ((line = br.readLine()) != null) {
                // Split the line by commas (or any other delimiter)
                String[] rowData = line.split(",");
                UpdateTarget.addItem(rowData[0].trim());

                // Add the data to the table model
            }
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading file!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_DistributeRadioActionPerformed

    private void ReceiveRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReceiveRadioActionPerformed
        if (UpdateStatus==1){
            return;
        }
        String path = "C:\\Users\\HP\\OneDrive - Asia Pacific University\\Class materials\\Sem 4\\OOP\\OOPAssignment\\src\\oopassignment\\suppliers.txt";
        try (BufferedReader br = new BufferedReader(new FileReader(path))) {
            UpdateStatus=1;
            String line;
            UpdateTarget.removeAllItems();
            br.readLine();
            UpdateTarget.addItem("Select");
            // Read file line by line
            while ((line = br.readLine()) != null) {
                // Split the line by commas (or any other delimiter)
                String[] rowData = line.split(",");
                UpdateTarget.addItem(rowData[0].trim());

                // Add the data to the table model
            }
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading file!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_ReceiveRadioActionPerformed

    private void UpdateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateBtnActionPerformed
        String supplier = "";
        String hospital = "";
        String discode = "D";
        if (ReceiveRadio.isSelected()){
            supplier = (String) UpdateTarget.getSelectedItem();
        }else{
            hospital = (String) UpdateTarget.getSelectedItem();
        }
        String item = (String) UpdatePPE.getSelectedItem();
        int quantity = (int) UpdateQuantity.getValue();
        Date selectedDate = (Date) UpdateDate.getValue();
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(selectedDate);
        String[] months = {
        "January", "February", "March", "April", "May", "June", 
        "July", "August", "September", "October", "November", "December"
        };
        int monthnum = calendar.get(Calendar.MONTH);
        String month = months[monthnum];
        
        
        //Count line to find index
        String filePath = "C:\\Users\\HP\\OneDrive - Asia Pacific University\\Class materials\\Sem 4\\OOP\\OOPAssignment\\src\\oopassignment\\transaction.txt"; // Change this to your file path
        int lineCount = 0;

        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            // Read lines until the end of the file
            while ((line = reader.readLine()) != null) {
                lineCount++; // Increment the line count for each line read
            }
            
            if (lineCount<10){
                discode = discode+0+lineCount;
            }else{
                discode = discode+lineCount;
            }
                        
        } catch (IOException e) {
            e.printStackTrace(); // Handle any IO exceptions
        }
        
        //Append into transaction.txt
        try {
            // Create a FileWriter in append mode (true means append)
            FileWriter writer = new FileWriter(filePath, true);

            // Write new data to the file (appending to the end) Item Code, Quantity, Hospital Code, Supplier Code, Month
            writer.write("\n"+discode+", "+item+", "+quantity+", "+hospital+", "+supplier+", "+month);

            // Close the writer
            writer.close();
            
        } catch (IOException e) {
            e.printStackTrace();
        }
        
        setVisible(false);
        new Menu().setVisible(true);

    }//GEN-LAST:event_UpdateBtnActionPerformed

    private void UpdateBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateBtn1ActionPerformed
        setVisible(false);
        new Menu().setVisible(true);
    }//GEN-LAST:event_UpdateBtn1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdatePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdatePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdatePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdatePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UpdatePage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton DistributeRadio;
    private javax.swing.JRadioButton ReceiveRadio;
    private javax.swing.JButton UpdateBtn;
    private javax.swing.JButton UpdateBtn1;
    private javax.swing.JSpinner UpdateDate;
    private javax.swing.JComboBox<String> UpdatePPE;
    private javax.swing.JSpinner UpdateQuantity;
    private javax.swing.JComboBox<String> UpdateTarget;
    private javax.swing.ButtonGroup UpdateType;
    // End of variables declaration//GEN-END:variables
}
